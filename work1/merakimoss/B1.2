1.数组和切片的区别
/*
	            数组	                                            切片
内存结构	 数组是一段大小固定的空间，他的大小就           切片本质就是一个结构体，他里面包含三部分
            是在初始化时给的长度len，根据长度len           ：address + len + cap，
            和元素类型大小就可以算出空间的完整大小         address： 就是他指向的内部数组或数组某个地方
            ，在完全确定后就会直接敲定无法改变。他         len：是当前的元素个数
            的头号元素也是整个空间的头，地址一致。         cap：可容纳元素总容量大小
                                                        本质上是一个引用空间，该空间和元素空间完全是
                                                        两个空间，所以切片的首地址和头号元素的首地址完全不同
长度                    静态固定                                动态，可扩容追加	
传递时的拷贝	         值拷贝	                                    引用传递
*/


package main
import "fmt"
func main() {

    二、GO创建切片的4种方式
    //1. 直接初始化
	a1 := []int{1, 2, 3}         
	fmt.Printf("a1: %v\n", a1)


    //2.使用数组初始化
    a2 := [...]int{1, 2, 3}
	b2 := a1[:]
	fmt.Printf("b2: %v\n", b2)


    //3.使用数组的部分元素初始化（切片表达式）
    //切片的底层就是一个数组，所以我们可以基于数组通过
    //切片表达式得到切片。切片表达式中的low和high表示
    //一个索引范围（包左不包右），得到切片的长度
    //=high-low，容量等于得到的切片的底层数组的容量。
    a := [...]int{1, 2, 3, 4, 5, 6, 7, 8}
	b := a[2:5] //下标2到5，左闭右开，不包括5
	fmt.Printf("b: %v\n", b)
	c := a[2:] //下标2后面的所有
	fmt.Printf("c: %v\n", c)
	d := a[:3] //下标3之前的，不包括3
	fmt.Printf("d: %v\n", d)
	e := a[:] //取所有值
	fmt.Printf("e: %v\n", e)


    //4. 空(nil)切片
    //一个切片在未初始化之前默认为nil，长度为0，容量为0
    var aa []int
	fmt.Println(aa == nil)
	fmt.Printf("len: %d,cap: %d\n", len(aa), cap(aa))

    //5.使用make
    var slice1 = make([]int,3)
    slice1[0] = 1
    slice1[1] = 2
    slice1[2] = 4
    fmt.Printf("通过make关键字[slic1] 类型:%T 值:%v \n",slice1,slice1)


=======================================================================
    三、GO创建map的3种方式

    //方式1：只声明map内存是没有分配空间必须通过make函数进行初始化，才会分配空间：
    //定义map变量：
    var a map[int]string
    a = make(map[int]string,10) //map可以存放10个键值对
    //将键值对存入map中：
    a[1234] = "张三"
    a[666] = "李四"
    //输出集合
    fmt.Println(a)


    //方式2：
    b := make(map[int]string)
    b[1234] = "张三"
    b[666] = "李四"
    fmt.Println(b)
    
    
    //方式3：
    c := map[int]string{
        1234 : "张三",
        666 : "李四",
    }
}