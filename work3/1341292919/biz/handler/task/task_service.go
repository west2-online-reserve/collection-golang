// Code generated by hertz generator.

package task

import (
	"Demo/biz/pack"
	"Demo/biz/service"
	"context"

	task "Demo/biz/model/task"
	"github.com/cloudwego/hertz/pkg/app"
)

// AddTask .
// @router /task/add [POST]
func AddTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.AddTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.AddTaskResponse)

	taskResp, err := service.NewTaskService(ctx, c).AddTask(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.Task(taskResp)
	pack.SendResponse(c, resp)
}

// UpdateTask .
// @router /task/update [PUT]
func UpdateTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.UpdateTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.UpdateTaskResponse)

	err = service.NewTaskService(ctx, c).UpdateTask(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// DeleteTask .
// @router /task/delete [DELETE]
func DeleteTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.DeleteTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.DeleteTaskResponse)

	err = service.NewTaskService(ctx, c).DeleteTaskSingle(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// DeleteTaskByStatus .
// @router /task/delete/status [DELETE]
func DeleteTaskByStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.DeleteTaskByStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.DeleteTaskByStatusResponse)

	err = service.NewTaskService(ctx, c).DeleteTaskByStatus(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// QueryTask .
// @router /task/query [GET]
func QueryTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.QueryTaskRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.QueryTaskResponse)
	taskResp, err := service.NewTaskService(ctx, c).QuerySingleTask(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}
	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.Task(taskResp)
	pack.SendResponse(c, resp)
}

// QueryTaskByStatus .
// @router /task/query/status [GET]
func QueryTaskByStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.QueryTaskListByStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.QueryTaskListByStatusResponse)

	list, count, err := service.NewTaskService(ctx, c).QueryTaskListByStatus(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.TaskList(list, count)
	pack.SendResponse(c, resp)
}

// QueryTaskListByKeyword .
// @router /task/query/keyword [GET]
func QueryTaskListByKeyword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task.QueryTaskListByKeywordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(task.QueryTaskListByKeywordResponse)

	list, count, err := service.NewTaskService(ctx, c).QueryTaskListByKeyword(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.TaskList(list, count)
	pack.SendResponse(c, resp)
}
